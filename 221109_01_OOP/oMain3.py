# -*- coding:utf-8 -*-
#from random import randint
#randint

# 패키지에 있는 Class 불러오기
# 방법 1
# import animal.pet             # import + 패키지명.모듈명 -> 파일을 사용 할 수 있도록 가져옴
                                # pet.py의 소스가 현재 파일로 들어온 셈
# d = animal.pet.Dog('망망이', 8) # 패키지명.모듈명.클래스명(파라미터값)
# d.printInfo()

#######################################################################################
# 방법 2
# import animal.pet as ap         # import + 패키지명.모듈명 as 별명
# d = ap.Dog('망망이', 8)         # 별명.클래스명(값)
# d.printInfo()
#######################################################################################
# 방법 3
# from animal.pet import Dog   # from + 패키지명.모듈명 + import 클래스명
# d = Dog('망뭉이', 12)
# d.printInfo()
#######################################################################################
# 방법 4
# from animal.pet import Dog as dd # from + 패키지명.모듈명 + import 클래스명 + as + 별칭
# d = dd('뭉망이', 3)
# d.printInfo()
#######################################################################################

# Java :
#    전 세계적으로 많이 사용됨
#    자신이 작업한 결과물을 공유하는 문화 -> maven
#    클래스명이 당연하게도 중복이 됨
#    클래스명이 중복될 떄 구분하는 수단 : package
#    패키지명은 전 세계적으로 중복이 되지 않도록 규칙을 정해둠
#        -> com(kr).회사명.프로그램명.주제
#    패키지명.클래스 로 사용 -> 조건에 부합하면 패키지명을 안써도 됨
#        (같은 패키지 or java.lang 소속 or import 하면 패키지명 생략 가능)
#    java.util.Random r = new java.util.Random() => Random r = new Random()
#    import는 선택사항

# Python :
#    전 세계적으로 많이 사용됨
#    자신이 작업한 결과물을 공유하는 문화 -> pip
#    클래스명이 당연하게도 중복이 됨
#    클래스명이 중복될 떄 구분하는 수단 : package
#    패키지명에 규칙이 따로 존재하지 않음
#        -> 패키지명 중복 시 
#    클래스를 패키지에 꼭 넣지는 않음
#    다른 파일을 불러온다면 import는 필수!

#######################################################################################
import animal.pet as ani

class Dog:
    def punch(self):
        print("망망빤치")

d = ani.Dog('뭉망이', 3)
d.printInfo()

# 클래스명이 중복된다면 가까운걸로 판정 (패키지 없을 경우)
d2 = Dog()
d2.punch()


































