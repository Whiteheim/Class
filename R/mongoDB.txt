MongoDB 설치과정 중
Install MongoD as a Service 
: 윈도우에서 GUI 프로그램 제어 
-> 명령어로 제어하기 위해 체크 해제

Install MongoDB Compass 
: MongoDB 접속 GUI 프로그램
-> 명령어로 제어하기 위해 체크 해제
------------------------------------------------
MongoDB 서버 ON
1) DB파일이 저자될 폴더 확보
	C:\Users\gns24\OneDrive\바탕 화면\R\DB

2) MongoDB 실행파일이 있는 위치
	C:\Program Files\MongoDB\4.4\bin -> cmd

mongod --dbpath DB파일저장경로 --bind_ip_all
mongod --dbpath C:\Users\gns24\OneDrive\바탕 화면\R\DB --bind_ip_all

cmd는 서버를 켜놓는거라 끄면 안됨

MongoDB 서버 off
-> cmd - ctrl + c or cmd 창 닫기
--------------------------------------------------
접속하기
MongoDB 실행이 있는 위치에서 
		cmd - mongo
=============================
MongoDB
정형데이터 - ex)미세먼지 
번호	위치	미세먼지	초미세먼지
1	강남구	25.0	10.0

비정형 데이터 - 블로그 글, 뉴스 기사 (형식/ 용량 등이 정해져있지 않은 데이터)
=================================
RDB-SQL (RDBMS / Structured Quety Language) 
	- OracleDB, MySQL, MariaDB,...
	- 테이블 생성 , 자료형/용량 전부 설정
	- 규칙에 맞지 않으면 에러 발생
		=> 정형데이터

NoSQL (No SQL, Non-Realational Optional Database SQL)
	- MongoDB, EleasticSearch, ...
		=> 형식이 없이 자유로움 (비정형 데이터)
------------------------------------------------------------------------
MongoDB	
	NoSQL계열
	Node.js (JavaScript back-end) 팀에서 만들어낸 Javascript 형태로 제어가능한 DB
	테이블 -> JS 배열
	데이터 -> JS 객체 

	크로스 플랫폼의 document 지향 DataBase
	높은 성능 (high perforence)
	높은 사용성 (high availability)
	쉬운 확장성 (easy scalailty) 등을 제공

		[RDBMS와 비교] (용어)
	Oracle			MongoDB
	DataBase			DataBase
	Table			Collection
	Tuple / Row		Document
	Column			Field
	Primary Key		Primary Key (Default : id)

	1. Database
	하나의 데이터베이스에는 여러개의 컬렉션을 가질 수 있음
	
	2. Collection	
	Document의 그룹이며, RDBMS
	단일 데이터베이스에 존재

	3. Document
	하나의 키 (Key)와 값(Value)의 집합으로 이루어짐
	동일한 필드ㅔ 다른 타입의 데이터를 가질 수 있음
	

================================================================================
만들어진 DataBase 확인
		show dbs
내가 현재 사용하고있는 database 확인
		db
DB 사용하기
	정의하는것이 없음
	사용하기만 존재
	사용할 때 collection 이름이 없으면
		- > DB가 자체 생성함
			use DB명
			use mongodb_tutorial
DB 제거
	db.dropDatabase()
---------------------------------------------------------------
CRUD	
	use nov28_student
	db.stats() 	/ db 사용 현황 조회
	bytes단위로 사용현황 조회
 <insert>
db.collction명.insert({속성명: 값, 속성명: 값 ,...});

-- 학생의 이름, 나이 -> 5개 정도 inssert

db.nov28_student.insert({name: 홍길동, age: 10});
db.nov28_student.insert({name: 김길동, age: 10});
db.nov28_student.insert({name: 이길동, age: 10});
db.nov28_student.insert({name: 박길동, age: 10});
db.nov28_student.insert({name: 최길동, age: 10});

	primary key - 'id' 필드
		따로 지정 없으면 자동 생성
	not null - 의미 X

db.nov28_student.find();

----------------------------------------------------------
coffee -> PK지정 (커피이름), 커피가격 -> 5개

db.nov28_coffee({name: 아메리카노 primary key, price: 4000)};
db.nov28_coffee({name: 라떼, price: 5000)};
db.nov28_coffee({name: 플랫화이트, price: 5000)};
db.nov28_coffee({name: 카푸치노, price: 5000)};
db.nov28_coffee({name: 카페오래, price: 5000)};

여러 목록 한번에 추가 : list를 사용 -> 데이터 담아주기1:0
db.nov28_coffee([
	{_id : "americano", price : 3000},
	{_id : "cafe latte", price : 4000},
	{_id : "plat white", price : 4500},
	{_id : "cappuccino", price : 5000},
	{_id : "cafe au lait", price : 4500},
])

db.nov28_coffee.find();
-----------------------------------------

OracleDB : server > DB > tablespace> table > data
MongoDB : server > DB >		> JS배열 > JS 객체

<SELECT>
- 결과가 JS배열 속에 JS객체의 형태로 나옴
	=> JSON, python의 list + dict

전체 조회
	db.collection명.find();
조건 검색
	db.collection명.find({필드명 : 값});
-- 가격이 3000원인 커피 정보 조회
db.nov28_coffee.find( { price : 3000 } );

-- 이상, 이하, 초과, 미만
	db.nov28_coffee.find( { 필드명 : {"연산자" : 값} } );
	연산자 : $lt. $lte, $gt, $gte
		<, <= ,   >,  >= 
db.nov28_coffee.find( { price : { "$gt" : 3000 } } );
 
-- where _id like '%latte%' << 문자열 포함 검색
	글자 포함검색 연산자 : $regex
	db.collection명.find( { 필드명 : {"연산자" : 값} } );

db.nov28_coffee.find( { _id : { "$regex" : "latte" } } );
------------------------------------------------------------------
< update >
	db.collection명.update( 찾을거, 바꿀거 );
	db.nov28_coffee.update( {_id : "americano"} , { price : 5000}  );
		-> 아메리카노의 가격을 5000원으로 변경
	-> 한계가 있어서 $set추가 (culomn 자체가 변경되는 경우가 생김)
	db.collection명.update(찾을거 , "$set" : 바꿀거)
	db.nov28_coffee.update( {_id : "cafe latte" }, {"$set" : {price : 3000} } );

	- 가격이 4000원 이상인 커피를 모두 무료로 변경
	db.nov28_coffee.update( { price : {$gte : 4000 } }, {"$set" : {price : 0} }  );

영향을 받을 데이터가 여러개 일 때 -> { multi : true }
	db.nov28_coffee.update( { price : {$gte : 4000 } }, {"$set" : {price : "free"} }, { multi : true } );

-----------------------------------------------------------------------------------------
< delete >
	db.collection명.remove(찾을거);
	
	- 가격이 100원 이상인거 삭제
	db.nov28_coffee.remove( { price : { "$gte" : 100 } } );

--------------------------------------------------------------------------------------------
python 연동 후
cmd에서 
use nov28
db.apr28_lunch.find();
















